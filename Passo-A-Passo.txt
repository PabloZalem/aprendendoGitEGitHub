Comando para decorar:
	git init = Esse comando serve para inicializar seu bash.


	
Como atualizar o git:
	git status = arquivos foram adicionado ou não, e se o arquivo foi atualizado.



Como adicionar o git:
	git add "nome completo do arquivo" entre aspas duplas.



Como adicionar mais de um arquivo no git de uma vez só:
	git add .



Como criar versões do código com commit:
	git commit -m "O que foi feito"

Para configurar o git:
	git config --global user.email
	git config --golval user.name



Como enviar alterações usando git Push:
	Cria-se um repositório no GitHub, pegue aque linke e use-o para linkar com o git.

Para ligar repositório local com o remoto:
	git remote add origin + SSH
	git remote -v;
	git push -u origin master
->
git@github.com:PabloZalem/TestApiComSwagger.git

	git push --set-upstream origin master = Isso quer dizer que ainda não definimos para qual branch nós estamos enviando.
	Isso tudo mostra que o nosso projeto foi adicionado.
	

Ciclo de atualização de código:
	git status = Para saber se tem alguma alteração;
	git add . = Para adicionar essas alterações;
	git status = Para saber se está tudo certo;
	git commit -m "O que está sendo commitado";
	git status;
	git push: Esse comando é para mandar a atualização para minha Branch Master.
	


Como verificar o histórico de atualização:
	git reflog:  A versão mais atual é a que fica no topo.
	


Como Navegar entre versões do seu código:	
	git reset --hard 2a63261:
Ele volta para a versão raiz. 	
	Esse número seria o id.
	Ele ira resetar para versão mais antiga;
	Caso queira voltar, apenas fazer um git reflog que voltará normalmente.
	Ao criar commits, você está criando cópias do seu código uma forma de lidar com isso.
	


O que são branchs e como criar uma:
	Branch significa galho: mas trazendo para o contexto são caminhos difentes no processo de desenvolvimento.
	Tem uma Branch principal que toda a alteração que tivermos mandaremos para lá.
	Cada versão é uma atualização.
	Para criar uma nova branch:
	git branch stating;
	Geralmente esse nome é nome dado que recebe atualizações.
	Para saber qual branch que estamos usando, é ver se está verde e tem asterisco.
	Para mudar de branch:
	git checkout staging.
	Teremos um passo a passo:
- git status
- git add .
- git status
- git commit -m ""
- git push, aqui se atentar pois, com estamos em uma nova branch, nesse caso na stating, ele dará um novo comando: 
	 git push --set-upstream origin stating
	Dando enter e formos vermos as alterações, veremos que temos três branchs.
	Você continua a capacidade de versionar o código e não terá o risco de ter um problema com o código principal.



Git merge  - Como unir códigos:
	git branch:
	git checkout master;
	git merge stating 
		Você estará puxando de um código atualizado para sua master.
	git pull
		Vai trazer atualizaçãoes;
	git merge stating.
	Ciclo: 
- git pull da branch principal;
- gerar uma nova branch à partir da branch principal;
- Trabalhar e adicionar novas funcionalidades da nova branch que criou.
- Finalizou o trabalho na branch temporária;
- Git checkout na branch principal;
- Git pull;
- Mergiar (unir) o código da branch temporária com a branch principal (depois de tester)	
- Git Push da branch principal.

	Exemplo:
- git pull;
- git checkout -b sistema-de-login master	
	Criado uma nova branch, baseada na branch master;
- git add .
- git status;
- git commit -m "atualizar";
- git checkout master;
- git pull
	Essa parte é importante pois, antes de fazer um merge é necessário trazer as atualizações para branch master, caso contrário, você quebrará o código.
- git merge sistema-de-login;
	você vai puxar;
- git push
	para mandar pra principal.



Pull Request - Um merge democrático.
	Você só vai unir com o principal, caso alguém aprove fazendo um pull request.
	Ex.:
- git checkout sistema-de-login
- git add.
- git status;
- git commit -m "";
- git push --set--upstream origin sistema-de-login
	Enviando para nuvem;
	Indo até ao gitHub:
- Compare & pull request:
	Escolher a base : master <- comapare: stating;
- Merge pull request;
- Confirm merge;



GitIgnore:
	touchs .gitignore
	Dentro dele será definido qual pasta não pode ser tocado.
	Ao dar um git status, ele msotrará um git ignore.
	Colocar o caminho dele dentro do ignore.
	O git ignore = ele controla o que será adicionado ou não.
- git status;
- git commit -m " ";
- git push;


	
Considerações finais:
- git init = inicializada um novo repositório;
- git add . = adicionar o arquivos atuais ao proximo commit;
- git status = verificar o status atual do reposit´roio git;
- git commit -m "mensagem de texto" = cria um novo commit com uma mensagem;
- git push = envia as atualizaçãoes para a nuvem na branch atualmente ativa;
- git branch = permite listar e ver qual branch está ativa atualmente;
- git checkout nome-da-branch = permite mudar para uma nova branch;
- git checkout -b "noem da branch de origem" "nome da nova branch" = permite mudar e criar uma nova branch com base em outra;
- git merge "branch a receber merge" = permite fazer merge da branch ativa atualmente com outra branch;
- git pull = atualiza a branch atualmente ativa.


***Como alterar o repositório
	git remote remove github + nome do repositorio.

Visualizando REMOTE:
	Para viasualizar qualquer remote existente para seu repositório, podemos rodar git remote ou git remote -v.
	Esse comando apenas mostra uma lista de remotes.
	Se você não adicionou algum remoto ainda, ele não motrará nada.
	

Adicionar Remote:
	Git remote add origin <url>
	Origin é o nome curte para a url.
	Que siginifica que quando ainda eu uso o nome origin, eu estou referindo para a url do github particuar como um nome pseudomico.
	O nome origin é o  convencional git remote name, ele não é tão especial.
	É apenas um nome para uma URL.
	Quando compiamos um GitHub repo, o nome remote predefinido ele aberto para nós é chamado origin.
	Você pode mudar isso.
	Muitas pessoas partir disso como é.
	Como temos master como a branch padrão igual que origin é padrão, se necessário podemos mudar o nome.
	

git remote;
git remote -v
git remote add origin https://github.com/PabloZalem/aprendendoGitEGitHub.git
git remote: Aparece o nome que você colocou no caso foi o origin
git remote -v: aparecerá o:
	versionamento principal para (fetch) e (push).
	git remote rename origin: esse comando é para alterar o nome da master de origin seria para outro master:
	git remote renam origin pablo. Aparecerá no lugar do origin o pablo.
git remote rename origin pablo.	
git remote remove origin
	Esse passo-passo é para remover o origin.
git log: 
	Esse comando é para saber do histórico.

	


REVIEW:
	Repositórios: Aonde eu deixo meus projetos;
	Versionamento: Controlar versões do meu código;
	git --version = para saber a versão


Configurando sua identificação no GitHub:
- git config --global user.name "Seu nome"
- git config --global.email "Seu email de cadastro no GitHub"
- git config --list



Confiurando para ver arquivos OCULTOS:
	Iniciar -> Opções do explorador de arquivos.
	Desmarcar: "Ocultar as extensões dos tipos de arquivos conhecidos"
	Marcar: "Mostar arquivos, pastas e unidades ocultas".



Como configurar chave SSH para o GitHub:
	SSH é um protocolo para comunicação de dados com segurança.
	O GitHub aboliu a autenticação somente com o usuário e senha.
	A ideia básica é cadastrar previamente quais computadores podem acessar o GitHub em seu nome.
	Outros computadores podem acessar.
1 - Gerar uma chave SSH no seu computador;
2- Cadastrar essa chave no seu GitHub.
	No git você gerará esse comando:
	ssh-keygen -t rsa -b 4096 -C "zalem.pablo@yahoo.com"
	Settings;
	SSH and GPS keys;
	SSH keys = New SSH key.
	


Passo a Passo: Salvar primeira versão de um projeto no GitHub:
	Considerando que agora seu ambiente já está todo configurado (usuário, visualização de arquivos ocultos, chaves SSH), sempre que você criar um novo projeto, os passos básicos serão estes (troque os parâmetros em azul pelos seus dados):
git init = inicializar;
git add . = adicionar as alterações;
git status
git commit -m "Mensagem explicativa"
git status
git branch -M main;
git remote add origin git@github.com
	seuusuario/seurepositorio.git
git push u- origin main.
	Está associado com o gitHub;
git push -u origin main;



Passo a Passo:  salvar uma nova versão:
git status;
git add . 
git commit -m "Mensagem explicativa"
git push
	

SHA256:HIyQ4Vfs/q5fxqfOuTcBUGJKQsXtvoP1r4y/ZlhL7Zg zalem.pablo@yahoo.com
